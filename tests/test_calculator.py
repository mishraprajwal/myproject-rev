"""Module for testing the Calculator class with Faker integration.

This module uses the Faker library to generate dynamic input values for testing
the Calculator class's arithmetic operations and ensuring robust handling of a
wide range of inputs.
"""

import pytest
from faker import Faker
from calculator import Calculator

class TestCalculator:
    """Test suite for the Calculator class with dynamic test data generated by Faker."""

    @classmethod
    def setup_class(cls):
        """Setup method for test class to initialize Faker."""
        cls.fake = Faker()

    @pytest.fixture(autouse=True)
    def setup_method(self):
        """Fixture to clear the calculation history before each test."""
        Calculator.clear_history()

    def test_addition(self):
        """Test addition with dynamic values."""
        num1 = self.fake.random_number(digits=2)
        num2 = self.fake.random_number(digits=2)
        assert Calculator.add(num1, num2) == num1 + num2
        assert Calculator.get_last_calculation() == f"Added {num1} + {num2} = {num1 + num2}"

    def test_subtraction(self):
        """Test subtraction with dynamic values."""
        num1 = self.fake.random_number(digits=2)
        num2 = self.fake.random_number(digits=2)
        assert Calculator.subtract(num1, num2) == num1 - num2
        assert Calculator.get_last_calculation() == f"Subtracted {num1} - {num2} = {num1 - num2}"

    def test_multiplication(self):
        """Test multiplication with dynamic values."""
        num1 = self.fake.random_number(digits=2)
        num2 = self.fake.random_number(digits=2)
        assert Calculator.multiply(num1, num2) == num1 * num2
        assert Calculator.get_last_calculation() == f"Multiplied {num1} * {num2} = {num1 * num2}"

    def test_division(self):
        """Test division with dynamic values."""
        num1 = self.fake.random_number(digits=2)
        # Ensure num2 is not zero to avoid division by zero
        num2 = self.fake.random_number(digits=2, fix_len=True)
        assert Calculator.divide(num1, num2) == num1 / num2
        assert Calculator.get_last_calculation() == f"Divided {num1} / {num2} = {num1 / num2}"

    def test_division_by_zero(self):
        """Ensure division by zero is properly handled."""
        num1 = self.fake.random_number(digits=2)
        with pytest.raises(ValueError, match="Cannot divide by zero."):
            Calculator.divide(num1, 0)

    def test_calculation_history(self):
        """Verify calculation history is accurately maintained with dynamic values."""
        num1 = self.fake.random_number(digits=2)
        num2 = self.fake.random_number(digits=2)
        Calculator.add(num1, num2)
        Calculator.subtract(num1, num2)
        Calculator.multiply(num1, num2)
        Calculator.divide(num1, num2 if num2 != 0 else 1)  # Ensure no division by zero
        expected_history = [
            f"Added {num1} + {num2} = {num1 + num2}",
            f"Subtracted {num1} - {num2} = {num1 - num2}",
            f"Multiplied {num1} * {num2} = {num1 * num2}",
            f"Divided {num1} / {num2 if num2 != 0 else 1} = {num1 / (num2 if num2 != 0 else 1)}"
        ]
        assert Calculator.history == expected_history
